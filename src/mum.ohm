mum {

  Program = Stmt+
  
  Stmt    = Print
          | Call
  	  | VarDecl
          | FunDecl 
          | Loop
          | If
          | Assign
          | Exp
  
  Print   = "mumble" "(" Exp ")"

  Call = id "(" (ListOf<Exp, ",">) ")"
  
  VarDecl = Type id "=" Exp 
          
  FunDecl = "task" id "(" (ListOf<Param, ",">) ")" ("yields" Exp)? (":" Suite)? 
  
  List    = "[" ListOf<Exp, ","> "]"
  
  Map     =  "{" ListOf<Binding, ","> "}"

  Binding = Exp "->" Exp
  
  Loop    = "loop" Control ":" Suite
  
  Control = "until" Exp  // only while loops for now
  
  If      = if Exp ":" Suite else (Suite | If)            --long
          | if Exp Suite                              --short
              
  Suite   = Stmt* "end"
  
  Assign  = id "=" Exp

  Param   = Type id
  Type    = "bool"
          | "str"
          | "num"
          | "list"
          | "map" "<" Type "," Type ">"   --maptype
          
 keyword = "end"
          | if
          | else
          | elseif
          | loop
          | until
          | task
          | yields
          | true
          | false
          | "mumble"
          | rem
  
  Exp     = Exp "||" Exp0           --or
          | Exp "&&" Exp0           --and
          | Exp0
  Exp0    = Exp0 relop Exp1                  --binary
          | Exp1 
  Exp1    = Exp1 logicop Exp2                --binary      
          | Exp2
  Exp2    = Exp2 ("+" | "-") Exp3            --binary
          | Exp3
  Exp3    = Exp3 ("*" | "/") Exp4            --binary
  		  | rem Exp5 "/" Exp5         --modulo
 
          | Exp4
  Exp4    = Exp5 "^" Exp4                   --binary
          | Exp5      

  Exp5   = num                      
          | id
          | true
          | false
          | strlit      
          | Map 
          | List
          | "(" Exp ")"                      --parens
        
      
  num     = digit+ ("." digit+)?
  id      = ~keyword letter ("_" | letter | digit)*
  strlit  = "\"" char* "\""         
  char    = ~"\\" ~"\"" ~"\n" ~"~" any
  logicop = ("!&" | "!|" | "!")
  relop   = ("<=" | "<" | "!=" | "==" | ">=" | ">")
  
  if          = "if" ~alnum
  else        = "else" ~alnum
  true        = "true" ~alnum
  false       = "false" ~alnum
  elseif      = "elseif" ~alnum
  loop        = "loop" ~alnum
  until       = "until" ~alnum
  task        = "task" ~alnum
  yields      = "yields" ~alnum
  rem         = "rem" ~alnum

  
  space   += "//" (~"\n" any)* ("\n" | end)  --comment
}